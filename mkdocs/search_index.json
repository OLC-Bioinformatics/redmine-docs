{
    "docs": [
        {
            "location": "/",
            "text": "OLC Redmine Automator\n\n\nTo facilitate the sharing of the CFIA's genomic data and tools to analyze this data, we make use of the Redmine\nplatform. Our instance of Redmine can be found \nhere\n (note that you must be on\nthe CFIA network in order to access Redmine).\n\n\nIf you have not yet gotten started with Redmine or want to know how the Redmine automator works and what it can do,\ntake a look at our \nGetting Started\n page for instructions on how to start using Redmine and a\nbrief overview of what Redmine can do.\n\n\nFor any issues or general help with Redmine, see the \nTroubleshooting\n page.",
            "title": "Home"
        },
        {
            "location": "/#olc-redmine-automator",
            "text": "To facilitate the sharing of the CFIA's genomic data and tools to analyze this data, we make use of the Redmine\nplatform. Our instance of Redmine can be found  here  (note that you must be on\nthe CFIA network in order to access Redmine).  If you have not yet gotten started with Redmine or want to know how the Redmine automator works and what it can do,\ntake a look at our  Getting Started  page for instructions on how to start using Redmine and a\nbrief overview of what Redmine can do.  For any issues or general help with Redmine, see the  Troubleshooting  page.",
            "title": "OLC Redmine Automator"
        },
        {
            "location": "/getting_started/",
            "text": "What is Redmine, and what can I use it for?\n\n\nRedmine is a system for project management and issue tracking that OLC has configured to automate a number of\nbioinformatics tasks. With Redmine, you can \nretrieve genomic data\n\n(either raw reads or draft assemblies) that is stored at OLC to perform your own analysis locally, \nlook for\nantibiotic resistance genes\n or \nfind plasmids\n in assemblies,\n\ncreate phylogenetic trees\n, compare \nstrains against RefSeq\n, and more.\n\n\nIf a tool you need is not currently available, we are generally able to add tools on request.\n\n\nAccessing Redmine\n\n\nTo access Redmine, go to \nhttps://redmine.biodiversity.agr.gc.ca\n (note that you\nmust be on the CFIA/Agriculture Canada network). Once there, login with your corporate username and password. If this is\nyour first time using Redmine, you will need to be added to the CFIA Genomics project. To get access, send an email\nto \nandrew.low@canada.ca\n, with \nadam.koziol@canada.ca\n CC'd and say you need access to the OLC Genomics project. Once you have been added to the project,\nhead to \nthe project page\n. This is where you will\nbe able to create requests.\n\n\nChanging Email Settings\n\n\nBy default, Redmine likes to send you emails about literally every issue that anybody reports, which can lead to\nreceiving far more emails than anybody has ever wanted to receive. To change this, click on the \nMy Account\n button (found\nin the top right corner when logged in to Redmine) and change the dropdown for email notifications from \nFor any event\non all my projects\n to something else - I recommend \nOnly for things I watch or I'm involved in\n. Once that's done, hit\nthe \nSave\n button on the bottom left of the screen to make sure Redmine remembers your email preferences.\n\n\nCreating Issues\n\n\nEverything in Redmine is done by creating \nIssues\n - these are requests for an analysis to be done.\n\n\nTo create a new issue, click on the \nNew Issue\n button, as shown in the below screenshot.\n\n\nClick to see screenshot\n\n\n\n\n\n\nThe page for new issues can be seen in the next screenshot. To have your analyses done, specific keywords are put in the\n\nSubject\n header, with any necessary details put in the \nDescription\n section. Details on what exactly needs to be put\ninto each section are under the \nData\n and \nAnalysis\n tabs for specific tools. Once an issue has been filled out, click\non the \nCreate\n button. Once that's done you can sit back and relax - you'll receive emails when your request has been\nsubmitted to our compute cluster (which should happen within a minute or two from the time you submitted your issue),\nand another once your job has completed (which, depending on the request, can be anywhere from a few minutes to a few\nhours).\n\n\nClick to see screenshot",
            "title": "Getting Started"
        },
        {
            "location": "/getting_started/#what-is-redmine-and-what-can-i-use-it-for",
            "text": "Redmine is a system for project management and issue tracking that OLC has configured to automate a number of\nbioinformatics tasks. With Redmine, you can  retrieve genomic data \n(either raw reads or draft assemblies) that is stored at OLC to perform your own analysis locally,  look for\nantibiotic resistance genes  or  find plasmids  in assemblies, create phylogenetic trees , compare  strains against RefSeq , and more.  If a tool you need is not currently available, we are generally able to add tools on request.  Accessing Redmine  To access Redmine, go to  https://redmine.biodiversity.agr.gc.ca  (note that you\nmust be on the CFIA/Agriculture Canada network). Once there, login with your corporate username and password. If this is\nyour first time using Redmine, you will need to be added to the CFIA Genomics project. To get access, send an email\nto  andrew.low@canada.ca , with  adam.koziol@canada.ca  CC'd and say you need access to the OLC Genomics project. Once you have been added to the project,\nhead to  the project page . This is where you will\nbe able to create requests.  Changing Email Settings  By default, Redmine likes to send you emails about literally every issue that anybody reports, which can lead to\nreceiving far more emails than anybody has ever wanted to receive. To change this, click on the  My Account  button (found\nin the top right corner when logged in to Redmine) and change the dropdown for email notifications from  For any event\non all my projects  to something else - I recommend  Only for things I watch or I'm involved in . Once that's done, hit\nthe  Save  button on the bottom left of the screen to make sure Redmine remembers your email preferences.  Creating Issues  Everything in Redmine is done by creating  Issues  - these are requests for an analysis to be done.  To create a new issue, click on the  New Issue  button, as shown in the below screenshot.  Click to see screenshot    The page for new issues can be seen in the next screenshot. To have your analyses done, specific keywords are put in the Subject  header, with any necessary details put in the  Description  section. Details on what exactly needs to be put\ninto each section are under the  Data  and  Analysis  tabs for specific tools. Once an issue has been filled out, click\non the  Create  button. Once that's done you can sit back and relax - you'll receive emails when your request has been\nsubmitted to our compute cluster (which should happen within a minute or two from the time you submitted your issue),\nand another once your job has completed (which, depending on the request, can be anywhere from a few minutes to a few\nhours).  Click to see screenshot",
            "title": "What is Redmine, and what can I use it for?"
        },
        {
            "location": "/data/external_retrieve/",
            "text": "External Retrieve\n\n\nWhat does it do?\n\n\nExternal retrieve is a process that will upload data you request (either raw reads or draft assemblies) to an FTP site\nso that you can download it in the event that you need to have your files locally available.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nExternal Retrieve\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nThe first line of your description tells the process whether you want raw reads or draft assemblies. For reads,\nthe first line should be \nfastq\n, and for assemblies the first line should be \nfasta\n. Every line after that should be a\nSEQID that you want the data for.\n\n\nExample\n\n\nFor an example of an External Retrieve, see \nissue 12822\n.\n\n\nHow long does it take?\n\n\nIf your request is for a small number of files, it will generally be done within a few minutes. The more files requested,\nthe longer the request will take.\n\n\nWhat can go wrong?\n\n\nA few things can go wrong with this process:\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.\n\n\n2) FTP timeout. Sometimes, particularly for larger requests, the upload to the FTP will run into problems and time out,\nin which case you will likely get an error message similar to this: \n[Errno 104] Connection reset by peer\n. If this occurs,\nyou can either try again later, or, if you had a large request, try splitting it into a few smaller requests. If the\nproblem persists, send us an email and we'll try to get it figured out.",
            "title": "External Retrieve"
        },
        {
            "location": "/data/external_retrieve/#external-retrieve",
            "text": "What does it do?  External retrieve is a process that will upload data you request (either raw reads or draft assemblies) to an FTP site\nso that you can download it in the event that you need to have your files locally available.  How do I use it?  Subject  In the  Subject  field, put  External Retrieve . Spelling counts, but case sensitivity doesn't.  Description  The first line of your description tells the process whether you want raw reads or draft assemblies. For reads,\nthe first line should be  fastq , and for assemblies the first line should be  fasta . Every line after that should be a\nSEQID that you want the data for.  Example  For an example of an External Retrieve, see  issue 12822 .  How long does it take?  If your request is for a small number of files, it will generally be done within a few minutes. The more files requested,\nthe longer the request will take.  What can go wrong?  A few things can go wrong with this process:  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.  2) FTP timeout. Sometimes, particularly for larger requests, the upload to the FTP will run into problems and time out,\nin which case you will likely get an error message similar to this:  [Errno 104] Connection reset by peer . If this occurs,\nyou can either try again later, or, if you had a large request, try splitting it into a few smaller requests. If the\nproblem persists, send us an email and we'll try to get it figured out.",
            "title": "External Retrieve"
        },
        {
            "location": "/analysis/autoclark/",
            "text": "AutoCLARK\n\n\nWhat does it do?\n\n\nThis process runs CLARK, a metagenomics tool, to determine what species are present in a sample. This is useful if you\nare unsure what species your sample is, or to check to see if any cross-species contamination occurred (or, obviously,\nif you have a shotgun metagenomics sample). Lots of detail on CLARK is provided at the \nCLARK website\n.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nAutoCLARK\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nIn the \nDescription\n field first specify if you want CLARK to look at raw reads or draft assemblies for species\ndetermination. For reads, the first line of your description should be \nfastq\n, and for assemblies it should be \nfasta\n.\nSubsequent lines should be the SEQIDs you want CLARK to be looking at.\n\n\nExample\n\n\nFor an example AutoCLARK, see \nissue 12819\n.\n\n\nInterpreting Results\n\n\nOnce CLARK is complete, a file called \nabundance.xlsx\n will be uploaded to Redmine. This file shows the species present\nfor each strain in the request. These results should be interpreted with caution - species that show up with low\nproportions (less than 1-2 percent) are often not actually there and are just artifacts of the analysis.\n\n\nHow long does it take?\n\n\nCLARK will usually take 10 to 15 minutes to run, though it may take substantially longer if you requested that a large\nnumber of SEQIDs be analyzed.\n\n\nWhat can go wrong?\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "AutoCLARK"
        },
        {
            "location": "/analysis/autoclark/#autoclark",
            "text": "What does it do?  This process runs CLARK, a metagenomics tool, to determine what species are present in a sample. This is useful if you\nare unsure what species your sample is, or to check to see if any cross-species contamination occurred (or, obviously,\nif you have a shotgun metagenomics sample). Lots of detail on CLARK is provided at the  CLARK website .  How do I use it?  Subject  In the  Subject  field, put  AutoCLARK . Spelling counts, but case sensitivity doesn't.  Description  In the  Description  field first specify if you want CLARK to look at raw reads or draft assemblies for species\ndetermination. For reads, the first line of your description should be  fastq , and for assemblies it should be  fasta .\nSubsequent lines should be the SEQIDs you want CLARK to be looking at.  Example  For an example AutoCLARK, see  issue 12819 .  Interpreting Results  Once CLARK is complete, a file called  abundance.xlsx  will be uploaded to Redmine. This file shows the species present\nfor each strain in the request. These results should be interpreted with caution - species that show up with low\nproportions (less than 1-2 percent) are often not actually there and are just artifacts of the analysis.  How long does it take?  CLARK will usually take 10 to 15 minutes to run, though it may take substantially longer if you requested that a large\nnumber of SEQIDs be analyzed.  What can go wrong?  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "AutoCLARK"
        },
        {
            "location": "/analysis/confindr/",
            "text": "ConFindr\n\n\nWhat does it do?\n\n\nConFindr looks for both intra-species and inter-species contamination in raw reads, which can cause misassemblies and\nerroneous downstream analysis. More details on ConFindr can be found \non GitHub\n.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nConFindr\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nAll you need to put in the description is a list of SEQIDs you want to detect contamination in, one per line.\n\n\nExample\n\n\nFor an example ConFindr, see \nissue 12881\n.\n\n\nInterpreting Results\n\n\nWhen your request is complete, a file called \nconfindr_output.zip\n will be uploaded. This contains two files: \nconfindr_log.txt\n,\nand \nconfindr_report.csv\n. The report file contains 5 columns:\n\n\n\n\nSample: The name of the sample\n\n\nGenus: What ConFindr thinks the genus of the sample is. If ConFindr finds more than one genus, both will be listed here.\n\n\nNumContamSNVs: How many times ConFindr found something that looked like a contaminating SNV. Anything 3 or over\nis enough to call a sample as contaminated.\n\n\nNumUniqueKmers: How many unique kmers were found for the rMLST genes. If this number is over 45000, a sample is called\nas contaminated.\n\n\nContamStatus: Shown as \nTrue\n if ConFindr thinks a sample is contaminated, and \nFalse\n if the sample is thought to be\nclean.\n\n\n\n\nThe log file can mostly be ignored - if any unexpected errors come up, we may use it for debugging purposes.\n\n\nHow long does it take?\n\n\nConFindr will take between 1 and 2 minutes for each sample.\n\n\nWhat can go wrong?\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "ConFindr"
        },
        {
            "location": "/analysis/confindr/#confindr",
            "text": "What does it do?  ConFindr looks for both intra-species and inter-species contamination in raw reads, which can cause misassemblies and\nerroneous downstream analysis. More details on ConFindr can be found  on GitHub .  How do I use it?  Subject  In the  Subject  field, put  ConFindr . Spelling counts, but case sensitivity doesn't.  Description  All you need to put in the description is a list of SEQIDs you want to detect contamination in, one per line.  Example  For an example ConFindr, see  issue 12881 .  Interpreting Results  When your request is complete, a file called  confindr_output.zip  will be uploaded. This contains two files:  confindr_log.txt ,\nand  confindr_report.csv . The report file contains 5 columns:   Sample: The name of the sample  Genus: What ConFindr thinks the genus of the sample is. If ConFindr finds more than one genus, both will be listed here.  NumContamSNVs: How many times ConFindr found something that looked like a contaminating SNV. Anything 3 or over\nis enough to call a sample as contaminated.  NumUniqueKmers: How many unique kmers were found for the rMLST genes. If this number is over 45000, a sample is called\nas contaminated.  ContamStatus: Shown as  True  if ConFindr thinks a sample is contaminated, and  False  if the sample is thought to be\nclean.   The log file can mostly be ignored - if any unexpected errors come up, we may use it for debugging purposes.  How long does it take?  ConFindr will take between 1 and 2 minutes for each sample.  What can go wrong?  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "ConFindr"
        },
        {
            "location": "/analysis/diversitree/",
            "text": "DiversiTree\n\n\nWhat does it do?\n\n\nDiversiTree is used for creating phylogenetic trees using \nparsnp\n,\nand optionally finding a specified number of strains that represent the most genetic diversity.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nDiversiTree\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nThe first line of the description should be the number of diverse strains you want picked. If all you want here is the\ntree and don't care about the number of strains, you can set this to 1. Subsequent lines should be the SEQIDs you want\nto create the tree from. Note that these strains should all be fairly closely related, or the tree creation may fail (so\ntry to keep things to the same species).\n\n\nExample\n\n\nFor an example DiversiTree, see \nissue 12100\n.\n\n\nInterpreting Results\n\n\nDiversiTree will upload two files to Redmine on completion: \nstrains.txt\n, and \ntree.nwk\n. The \nstrains.txt\n file contains the\n\nX\n most diverse strains, where \nX\n is the number specified in the first line of the description. The \ntree.nwk\n file\ncontains the phylogenetic tree created in newick format. If you want to view this tree, you can use a program such as\n\nFigTree\n or a web-based viewer like \nphylo.io\n.\n\n\nHow long does it take?\n\n\nThis depends largely on the number of strains you want to use to create the tree. It can often be as quick as a few minutes\nif you have 10 or less strains, or take several hours if you want a larger (100 or so strain) tree.\n\n\nWhat can go wrong?\n\n\nA few things can go wrong with this process:\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.\n\n\n2) Strains too far apart. DiversiTree will warn you if it thinks that the strains you want to make a tree from are\nnot closely related enough. If you get this warning, you may want to consider creating a new issue while leaving out\nthe strains it says are too far.",
            "title": "DiversiTree"
        },
        {
            "location": "/analysis/diversitree/#diversitree",
            "text": "What does it do?  DiversiTree is used for creating phylogenetic trees using  parsnp ,\nand optionally finding a specified number of strains that represent the most genetic diversity.  How do I use it?  Subject  In the  Subject  field, put  DiversiTree . Spelling counts, but case sensitivity doesn't.  Description  The first line of the description should be the number of diverse strains you want picked. If all you want here is the\ntree and don't care about the number of strains, you can set this to 1. Subsequent lines should be the SEQIDs you want\nto create the tree from. Note that these strains should all be fairly closely related, or the tree creation may fail (so\ntry to keep things to the same species).  Example  For an example DiversiTree, see  issue 12100 .  Interpreting Results  DiversiTree will upload two files to Redmine on completion:  strains.txt , and  tree.nwk . The  strains.txt  file contains the X  most diverse strains, where  X  is the number specified in the first line of the description. The  tree.nwk  file\ncontains the phylogenetic tree created in newick format. If you want to view this tree, you can use a program such as FigTree  or a web-based viewer like  phylo.io .  How long does it take?  This depends largely on the number of strains you want to use to create the tree. It can often be as quick as a few minutes\nif you have 10 or less strains, or take several hours if you want a larger (100 or so strain) tree.  What can go wrong?  A few things can go wrong with this process:  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.  2) Strains too far apart. DiversiTree will warn you if it thinks that the strains you want to make a tree from are\nnot closely related enough. If you get this warning, you may want to consider creating a new issue while leaving out\nthe strains it says are too far.",
            "title": "DiversiTree"
        },
        {
            "location": "/analysis/mobsuite/",
            "text": "MobSuite\n\n\nWhat does it do?\n\n\nMobSuite is a set of tools developed by the Public Health Agency of Canada for detecting plasmids in draft genome\nassemblies. This tool runs the \nmob_recon\n part of the suite, which first detects plasmids in the assemblies, and then\nperforms typing on the plasmids. More details on MobSuite, including fairly extensive details on the output files\nproduced, can be found at the \nMobSuite GitHub repository\n.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nMobSuite\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nAll you need to put in the description is a list of SEQIDs you want to look for plasmids in, one per line.\n\n\nExample\n\n\nFor an example MobSuite, see \nissue 12823\n.\n\n\nInterpreting Results\n\n\nMobSuite outputs quite a few files. The zip file uploaded will have one folder for each SEQID requested.\nWithin each folder, you will find a number of MobSuite output files. Of particular interest is the \ncontig_report.txt\n file,\nwhich assigns each contig in your assembly as chromosomal or plasmid, and has typing info on plasmid-derived contigs.\nFull descriptions of all files can be found at the \nMobSuite GitHub repository\n.\n\n\nHow long does it take?\n\n\nMobSuite works fairly quickly - it should take roughly one minute to analyze each SEQID that you have requested.\n\n\nWhat can go wrong?\n\n\nA few things can go wrong with this process:\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.\n\n\n2) FTP timeout. Sometimes, particularly for larger requests, the upload of results to the FTP will run into problems and time out,\nin which case you will likely get an error message similar to this: \n[Errno 104] Connection reset by peer\n. If this occurs,\nyou can either try again later, or, if you had a large request, try splitting it into a few smaller requests. If the\nproblem persists, send us an email and we'll try to get it figured out.",
            "title": "MobSuite"
        },
        {
            "location": "/analysis/mobsuite/#mobsuite",
            "text": "What does it do?  MobSuite is a set of tools developed by the Public Health Agency of Canada for detecting plasmids in draft genome\nassemblies. This tool runs the  mob_recon  part of the suite, which first detects plasmids in the assemblies, and then\nperforms typing on the plasmids. More details on MobSuite, including fairly extensive details on the output files\nproduced, can be found at the  MobSuite GitHub repository .  How do I use it?  Subject  In the  Subject  field, put  MobSuite . Spelling counts, but case sensitivity doesn't.  Description  All you need to put in the description is a list of SEQIDs you want to look for plasmids in, one per line.  Example  For an example MobSuite, see  issue 12823 .  Interpreting Results  MobSuite outputs quite a few files. The zip file uploaded will have one folder for each SEQID requested.\nWithin each folder, you will find a number of MobSuite output files. Of particular interest is the  contig_report.txt  file,\nwhich assigns each contig in your assembly as chromosomal or plasmid, and has typing info on plasmid-derived contigs.\nFull descriptions of all files can be found at the  MobSuite GitHub repository .  How long does it take?  MobSuite works fairly quickly - it should take roughly one minute to analyze each SEQID that you have requested.  What can go wrong?  A few things can go wrong with this process:  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.  2) FTP timeout. Sometimes, particularly for larger requests, the upload of results to the FTP will run into problems and time out,\nin which case you will likely get an error message similar to this:  [Errno 104] Connection reset by peer . If this occurs,\nyou can either try again later, or, if you had a large request, try splitting it into a few smaller requests. If the\nproblem persists, send us an email and we'll try to get it figured out.",
            "title": "MobSuite"
        },
        {
            "location": "/analysis/pointfinder/",
            "text": "PointFinder\n\n\nWhat does it do?\n\n\nPointFinder is a program complementary to ResFinder developed by the Danish Center for Genomic Epidemiology\nfor detection of antibiotic resistance in draft genome assemblies. Unlike ResFinder, PointFinder looks for point\nmutations that are known to confer antibiotic resistance.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nPointFinder\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nAll you need to put in the description is a list of SEQIDs you want to detect AMR in, one per line.\nNote that PointFinder is limited to detecting mutations in a few genera:\n\n\n\n\nCampylobacter\n\n\nEscherichia\n\n\nMycobacterium\n\n\nNeisseria\n\n\nSalmonella\n\n\n\n\nOur PointFinder automator will automatically determine the genus of your requested SEQIDs, and will not attempt to\nanalyze any SEQIDs that are not from one of these genera.\n\n\nExample\n\n\nFor an example PointFinder, see \nissue 12933\n.\n\n\nInterpreting Results\n\n\nPointFinder will upload a zip file called \npointfinder_output.zip\n. Within this folder, you will find 3 files per\nSEQID:\n\n\nNote: Any SEQIDs that had no resistance detected will not have any files uploaded\n\n\n\n\nSEQID_blastn_PointFinder_prediction.txt: Has each antibiotic for with known mutations for the genus of interest.\nAnything with a 0 had no detected mutations, anything other had predicted point mutation(s) for that antibiotic.\n\n\nSEQID_blastn_PointFinder_results.txt: A file listing the genes that had mutations, what they were, and what resistance those\nmutations confer.\n\n\nSEQID_blastn_PointFinder_table.txt: Much the same as the _results.txt file, but also lists known AMR genes that\ndid not have point mutations.\n\n\n\n\nHow long does it take?\n\n\nPointFinder should take 30 seconds to 1 minutes for analysis of each sample.\n\n\nWhat can go wrong?\n\n\n1) Requested SEQIDs are not available: If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.\n2) Can't run on requested genera: If the SEQIDs you request are not one of the genera that PointFinder works on,\nyou will get a message saying so. PointFinder will still run on any SEQIDs specified that are from the correct genera.",
            "title": "PointFinder"
        },
        {
            "location": "/analysis/pointfinder/#pointfinder",
            "text": "What does it do?  PointFinder is a program complementary to ResFinder developed by the Danish Center for Genomic Epidemiology\nfor detection of antibiotic resistance in draft genome assemblies. Unlike ResFinder, PointFinder looks for point\nmutations that are known to confer antibiotic resistance.  How do I use it?  Subject  In the  Subject  field, put  PointFinder . Spelling counts, but case sensitivity doesn't.  Description  All you need to put in the description is a list of SEQIDs you want to detect AMR in, one per line.\nNote that PointFinder is limited to detecting mutations in a few genera:   Campylobacter  Escherichia  Mycobacterium  Neisseria  Salmonella   Our PointFinder automator will automatically determine the genus of your requested SEQIDs, and will not attempt to\nanalyze any SEQIDs that are not from one of these genera.  Example  For an example PointFinder, see  issue 12933 .  Interpreting Results  PointFinder will upload a zip file called  pointfinder_output.zip . Within this folder, you will find 3 files per\nSEQID:  Note: Any SEQIDs that had no resistance detected will not have any files uploaded   SEQID_blastn_PointFinder_prediction.txt: Has each antibiotic for with known mutations for the genus of interest.\nAnything with a 0 had no detected mutations, anything other had predicted point mutation(s) for that antibiotic.  SEQID_blastn_PointFinder_results.txt: A file listing the genes that had mutations, what they were, and what resistance those\nmutations confer.  SEQID_blastn_PointFinder_table.txt: Much the same as the _results.txt file, but also lists known AMR genes that\ndid not have point mutations.   How long does it take?  PointFinder should take 30 seconds to 1 minutes for analysis of each sample.  What can go wrong?  1) Requested SEQIDs are not available: If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.\n2) Can't run on requested genera: If the SEQIDs you request are not one of the genera that PointFinder works on,\nyou will get a message saying so. PointFinder will still run on any SEQIDs specified that are from the correct genera.",
            "title": "PointFinder"
        },
        {
            "location": "/analysis/resfinder/",
            "text": "ResFinder\n\n\nWhat does it do?\n\n\nResFinder is a program developed by the Danish Center for Genomic Epidemiology for detection of antibiotic resistance\nin draft genome assemblies. It is very important to note that the Redmine version will only look for acquired antibiotic\nresistance genes (generally plasmid-borne) and not chromosomally encoded AMR genes that are caused by point mutations.\n\n\nIf you're interested in chromosomally encoded AMR genes, you can \nExternal Retrieve\n your\nassemblies of interest and submit them to an alternate AMR predictor, such as McMaster's \nCARD\n.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nResFinder\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nAll you need to put in the description is a list of SEQIDs you want to detect AMR in, one per line.\n\n\nExample\n\n\nFor an example ResFinder, see \nissue 12854\n.\n\n\nInterpreting Results\n\n\nResFinder will upload a file called \nresfinder.xlsx\n once it has completed, which shows every AMR gene found in each\nsample. Just because a gene/resistance is listed here does not necessarily mean the strain carries that resistance - it's important\nto look at the \nPercentIdentity\n and \nPercentCovered\n columns. You can be pretty sure that anything with 100 for both\nis actually there, but anything else requires further analysis to be sure.\n\n\nHow long does it take?\n\n\nResFinder is very fast - it should only take a few seconds to analyze each SEQID requested.\n\n\nWhat can go wrong?\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "ResFinder"
        },
        {
            "location": "/analysis/resfinder/#resfinder",
            "text": "What does it do?  ResFinder is a program developed by the Danish Center for Genomic Epidemiology for detection of antibiotic resistance\nin draft genome assemblies. It is very important to note that the Redmine version will only look for acquired antibiotic\nresistance genes (generally plasmid-borne) and not chromosomally encoded AMR genes that are caused by point mutations.  If you're interested in chromosomally encoded AMR genes, you can  External Retrieve  your\nassemblies of interest and submit them to an alternate AMR predictor, such as McMaster's  CARD .  How do I use it?  Subject  In the  Subject  field, put  ResFinder . Spelling counts, but case sensitivity doesn't.  Description  All you need to put in the description is a list of SEQIDs you want to detect AMR in, one per line.  Example  For an example ResFinder, see  issue 12854 .  Interpreting Results  ResFinder will upload a file called  resfinder.xlsx  once it has completed, which shows every AMR gene found in each\nsample. Just because a gene/resistance is listed here does not necessarily mean the strain carries that resistance - it's important\nto look at the  PercentIdentity  and  PercentCovered  columns. You can be pretty sure that anything with 100 for both\nis actually there, but anything else requires further analysis to be sure.  How long does it take?  ResFinder is very fast - it should only take a few seconds to analyze each SEQID requested.  What can go wrong?  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "ResFinder"
        },
        {
            "location": "/analysis/snvphyl/",
            "text": "SNVPhyl\n\n\nWhat does it do?\n\n\nSNVPhyl is a pipeline developed by the Public Health Agency of Canada for evaluating the number of SNPs between a\nreference strain and other closely related strains. It also builds a phylogenetic tree to attempt to show the\nrelatedness of these strains. Lots more info can be found at the \nSNVPhyl readthedocs site\n.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nSNVPhyl\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nThe first line of your description needs to be \nreference\n, and the second line the SEQID of the strain you want to act\nas your reference strain. Ideally, you'll want to pick a high-quality assembly for your reference.\n\n\nThe third line of your description should be \ncompare\n, and lines after that the SEQIDs for strains you want to compare\nyour reference to.\n\n\nExample\n\n\nFor an example SNVPhyl, see \nissue 12494\n.\n\n\nInterpreting Results\n\n\nThe zip file uploaded on SNVPhyl completion should contain 10 files. Important files are:\n\n\n\n\nsnvMatrix.tsv: Shows the number of SNVs between every strain submitted.\n\n\nvcf2core.tsv: Shows how much of the genome was covered by the analysis (look at the \nPercentage of all positions that are valid, included, and part of the core genome\n\ncolumn in the \nall\n row). This should be at least 90 percent, or the strains you were comparing were probably too far apart\nto get good results.\n\n\nphylogeneticTree.nwk: The phylogenetic tree created by SNVPhyl. If you want to view this tree, you can use a program such as\n\nFigTree\n or a web-based viewer like \nphylo.io\n.\n\n\n\n\nOther files can also be important - see the \ndocs on SNVPhyl Output files\n\nfor more information.\n\n\nHow long does it take?\n\n\nMost SNVPhyl requests take ~1 hour to complete. If you submit a request for a larger SNVPhyl (>30 strains), it may take\nsubstantially longer.\n\n\nWhat can go wrong?\n\n\nA few things can go wrong with this process:\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.\n\n\n2) Strains too far apart. SNVPhyl requires that the strains you want to compare to the reference be closely related to\nthe reference. If you ask for a SNVPhyl with things that are not very related, you will get a warning telling you so.\n\n\n3) No output files. Sometimes, SNVPhyl will say it has completed, but the typical output files will not be present. This\nis either because \na)\n there are no SNVs between the two strains, and so SNVPhyl crashes or \nb)\n SNVPhyl crashed for an\nunknown reason, which does happen occasionally. If this happens, your best bet is to try running the SNVPhyl again. If\nSNVPhyl keeps crashing even after subsequent attempts, let us know and we'll do our best to fix things.",
            "title": "SNVPhyl"
        },
        {
            "location": "/analysis/snvphyl/#snvphyl",
            "text": "What does it do?  SNVPhyl is a pipeline developed by the Public Health Agency of Canada for evaluating the number of SNPs between a\nreference strain and other closely related strains. It also builds a phylogenetic tree to attempt to show the\nrelatedness of these strains. Lots more info can be found at the  SNVPhyl readthedocs site .  How do I use it?  Subject  In the  Subject  field, put  SNVPhyl . Spelling counts, but case sensitivity doesn't.  Description  The first line of your description needs to be  reference , and the second line the SEQID of the strain you want to act\nas your reference strain. Ideally, you'll want to pick a high-quality assembly for your reference.  The third line of your description should be  compare , and lines after that the SEQIDs for strains you want to compare\nyour reference to.  Example  For an example SNVPhyl, see  issue 12494 .  Interpreting Results  The zip file uploaded on SNVPhyl completion should contain 10 files. Important files are:   snvMatrix.tsv: Shows the number of SNVs between every strain submitted.  vcf2core.tsv: Shows how much of the genome was covered by the analysis (look at the  Percentage of all positions that are valid, included, and part of the core genome \ncolumn in the  all  row). This should be at least 90 percent, or the strains you were comparing were probably too far apart\nto get good results.  phylogeneticTree.nwk: The phylogenetic tree created by SNVPhyl. If you want to view this tree, you can use a program such as FigTree  or a web-based viewer like  phylo.io .   Other files can also be important - see the  docs on SNVPhyl Output files \nfor more information.  How long does it take?  Most SNVPhyl requests take ~1 hour to complete. If you submit a request for a larger SNVPhyl (>30 strains), it may take\nsubstantially longer.  What can go wrong?  A few things can go wrong with this process:  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.  2) Strains too far apart. SNVPhyl requires that the strains you want to compare to the reference be closely related to\nthe reference. If you ask for a SNVPhyl with things that are not very related, you will get a warning telling you so.  3) No output files. Sometimes, SNVPhyl will say it has completed, but the typical output files will not be present. This\nis either because  a)  there are no SNVs between the two strains, and so SNVPhyl crashes or  b)  SNVPhyl crashed for an\nunknown reason, which does happen occasionally. If this happens, your best bet is to try running the SNVPhyl again. If\nSNVPhyl keeps crashing even after subsequent attempts, let us know and we'll do our best to fix things.",
            "title": "SNVPhyl"
        },
        {
            "location": "/analysis/strainmash/",
            "text": "StrainMash\n\n\nWhat does it do?\n\n\nStrainMash uses the MinHash algorithm (as implemented by \nmash\n) in order to very quickly\nfind which RefSeq type strain an assembly is closest to. This can be very useful if you aren't entirely sure what species\nit is that you've actually sequnced.\n\n\nHow do I use it?\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nStrainMash\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nAll you need to put in the description is a list of SEQIDs you want to analyze, one per line.\n\n\nExample\n\n\nFor an example StrainMash, see \nissue 12860\n.\n\n\nInterpreting Results\n\n\nStrainMash will upload a zip file once it finishes. This contains a folder called output, which will have a\ntext file for each SEQID entered showing results.\n\n\nThese text files have 6 columns:\n\n\n\n\nMashDistance: Represents roughly how close the query sequence is the the reference strain. 1 is a perfect match, 0 is no\nsimilarity. To say that something very closely matches a reference strain, this number should be \nat least\n 0.98\n\n\nNumMatchingHashes: Another measure of how close the query sequence is to the reference strain. 1000/1000 is a perfect match,\n0 is no similarity. Number needs to be fairly high (>850) for close matches to reference.\n\n\nMedianMultiplicity: Can mostly be ignored. Should always be 1.\n\n\nPvalue: An attempt to assign significance to the hit. Should be zero for anything that very closely matches a reference\nstrain.\n\n\nReferenceStrain: The NCBI Accession for the reference strain.\n\n\nOrganism: The name of the organism that is the reference strain.\n\n\n\n\nHow long does it take?\n\n\nStrainMash should take about 30 seconds to 1 minute to analyze each sample you send to it.\n\n\nWhat can go wrong?\n\n\n1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "StrainMash"
        },
        {
            "location": "/analysis/strainmash/#strainmash",
            "text": "What does it do?  StrainMash uses the MinHash algorithm (as implemented by  mash ) in order to very quickly\nfind which RefSeq type strain an assembly is closest to. This can be very useful if you aren't entirely sure what species\nit is that you've actually sequnced.  How do I use it?  Subject  In the  Subject  field, put  StrainMash . Spelling counts, but case sensitivity doesn't.  Description  All you need to put in the description is a list of SEQIDs you want to analyze, one per line.  Example  For an example StrainMash, see  issue 12860 .  Interpreting Results  StrainMash will upload a zip file once it finishes. This contains a folder called output, which will have a\ntext file for each SEQID entered showing results.  These text files have 6 columns:   MashDistance: Represents roughly how close the query sequence is the the reference strain. 1 is a perfect match, 0 is no\nsimilarity. To say that something very closely matches a reference strain, this number should be  at least  0.98  NumMatchingHashes: Another measure of how close the query sequence is to the reference strain. 1000/1000 is a perfect match,\n0 is no similarity. Number needs to be fairly high (>850) for close matches to reference.  MedianMultiplicity: Can mostly be ignored. Should always be 1.  Pvalue: An attempt to assign significance to the hit. Should be zero for anything that very closely matches a reference\nstrain.  ReferenceStrain: The NCBI Accession for the reference strain.  Organism: The name of the organism that is the reference strain.   How long does it take?  StrainMash should take about 30 seconds to 1 minute to analyze each sample you send to it.  What can go wrong?  1) Requested SEQIDs are not available. If we can't find some of the SEQIDs that you request, you will get a warning\nmessage informing you of it.",
            "title": "StrainMash"
        },
        {
            "location": "/analysis/wgsassembly/",
            "text": "WGS Assembly\n\n\nWhat does it do?\n\n\nWGS Assembly will take an Illumina MiSeq run and put it through the CFIA OLC Workflow for Bacterial Assembly and Typing (COWBAT).\n\n\nHow do I use it?\n\n\nBefore Redmine\n\n\nBefore submitting your request to Redmine, you need to upload your sequence data. Your sequence data should be in a folder\nnamed YYMMDD_LAB, where YYMMDD is the date sequencing was done, and LAB is a 3-letter code for your lab. For example, a\nsequencing run from Calgary done on July 16, 2018 would be 180716_CAL.\n\n\nThis folder needs to have the following files:\n\n\n\n\nSampleSheet.csv\n\n\nCompletedJobInfo.xml\n\n\nconfig.xml\n\n\nGenerateFASTQRunStatistics.xml\n\n\nRunInfo.xml\n\n\nrunParameters.xml\n\n\nthe InterOp folder\n\n\nA forward and reverse set of reads for each SEQID specified in your SampleSheet.csv\n\n\n\n\nTo upload this folder, navigate to \nftp://ftp.agr.gc.ca/incoming/cfia-ak\n in a file browser and drag and drop the folder\nto upload. Upload speed will vary depending on your connection. Once your upload is complete, you can head to Redmine\nto submit your issue.\n\n\nSubject\n\n\nIn the \nSubject\n field, put \nWGS Assembly\n. Spelling counts, but case sensitivity doesn't.\n\n\nDescription\n\n\nThe only thing to put in your description is the name of the folder you created and uploaded.\n\n\nExample\n\n\nFor an example WGS Assembly, see \nissue 12782\n.\n\n\nHow long does it take?\n\n\nWGS Assembly will likely take 5-6 hours to complete, although it can be as fast as 2 hours or as slow as 8.\n\n\nWhat can go wrong?\n\n\nA few things can go wrong with this process:\n\n\n1) FTP upload fails: Your upload to the FTP may time out or otherwise fail. If this happens, you will need to send us an\nemail so we can clear out the previous upload attempt before attempting to upload again.\n\n\n2) Validation fail: We validate a number of things about the files that are submitted before starting assembly, including\nmaking sure that all SEQIDs specified in the SampleSheet are uploaded, that the FASTQ files are appropriately sized, and\nthat all files required are present. If any of these validation checks fail, send us an email and we'll get things sorted\nout.",
            "title": "WGS Assembly"
        },
        {
            "location": "/analysis/wgsassembly/#wgs-assembly",
            "text": "What does it do?  WGS Assembly will take an Illumina MiSeq run and put it through the CFIA OLC Workflow for Bacterial Assembly and Typing (COWBAT).  How do I use it?  Before Redmine  Before submitting your request to Redmine, you need to upload your sequence data. Your sequence data should be in a folder\nnamed YYMMDD_LAB, where YYMMDD is the date sequencing was done, and LAB is a 3-letter code for your lab. For example, a\nsequencing run from Calgary done on July 16, 2018 would be 180716_CAL.  This folder needs to have the following files:   SampleSheet.csv  CompletedJobInfo.xml  config.xml  GenerateFASTQRunStatistics.xml  RunInfo.xml  runParameters.xml  the InterOp folder  A forward and reverse set of reads for each SEQID specified in your SampleSheet.csv   To upload this folder, navigate to  ftp://ftp.agr.gc.ca/incoming/cfia-ak  in a file browser and drag and drop the folder\nto upload. Upload speed will vary depending on your connection. Once your upload is complete, you can head to Redmine\nto submit your issue.  Subject  In the  Subject  field, put  WGS Assembly . Spelling counts, but case sensitivity doesn't.  Description  The only thing to put in your description is the name of the folder you created and uploaded.  Example  For an example WGS Assembly, see  issue 12782 .  How long does it take?  WGS Assembly will likely take 5-6 hours to complete, although it can be as fast as 2 hours or as slow as 8.  What can go wrong?  A few things can go wrong with this process:  1) FTP upload fails: Your upload to the FTP may time out or otherwise fail. If this happens, you will need to send us an\nemail so we can clear out the previous upload attempt before attempting to upload again.  2) Validation fail: We validate a number of things about the files that are submitted before starting assembly, including\nmaking sure that all SEQIDs specified in the SampleSheet are uploaded, that the FASTQ files are appropriately sized, and\nthat all files required are present. If any of these validation checks fail, send us an email and we'll get things sorted\nout.",
            "title": "WGS Assembly"
        },
        {
            "location": "/troubleshooting/",
            "text": "Troubleshooting\n\n\nError Messages\n\n\nIf you get error messages that aren't covered by the descriptions of the tools available, please let us know by sending\nus an email.\n\n\nWhy are things taking so long?\n\n\nOur compute cluster does run into situations where all available resources are being used. If that's the case, your job\nwill wait in queue until compute resources are freed up. This should be a fairly rare occurrence, but it does happen.\n\n\nContact Info\n\n\nIf you're having issues or want a new tool implemented, email us! For quickest response times, email Andrew with Adam CC'd.\n\n\nAndrew Low: \nandrew.low@canada.ca\n\n\nAdam Koziol: \nadam.koziol@canada.ca",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#troubleshooting",
            "text": "Error Messages  If you get error messages that aren't covered by the descriptions of the tools available, please let us know by sending\nus an email.  Why are things taking so long?  Our compute cluster does run into situations where all available resources are being used. If that's the case, your job\nwill wait in queue until compute resources are freed up. This should be a fairly rare occurrence, but it does happen.  Contact Info  If you're having issues or want a new tool implemented, email us! For quickest response times, email Andrew with Adam CC'd.  Andrew Low:  andrew.low@canada.ca  Adam Koziol:  adam.koziol@canada.ca",
            "title": "Troubleshooting"
        }
    ]
}